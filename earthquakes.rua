return select(2, timer('earthquakes.rua', ||do	-- BEGIN TIMER
--[[
what to track ...
- over a time range, sequentially go through all earthquakes
- as you add them, look through all previous points and consider the great-arc with this point (subject to angle constraints)
- report how well this new great-arc compares to older ones (i.e. is this new earthquake on a great-arc that already exists?)
	- by comparing dot of its axis with previous circles' axis
- as we get too old, throw out old points and their respective great-arcs
--]]


local Julian = require 'solarsystem.julian'
local Planets = require 'solarsystem.planets'
local dayInSec = require 'time'.dayInSec
local rotateFromSolarToEarthFrame = require 'time'.rotateFromSolarToEarthFrame

local time = timer.time
local timegm = timer.timegm
local gmtime = timer.gmtime

--local prevDays = 1	-- debugging
local prevDays = 31
--local prevDays = 365
--local CALC_SUN_OR_MOON_LONGITUDE_ANGLE = true

-- [=======[ download data
path'cache':mkdir()
local getDayCache = |t, force| do
	local tt = gmtime(t)
	local datestr = ('%04d-%02d-%02d'):format(tt.year, tt.month, tt.day)
	local csvpath = path('cache/'..datestr..'.csv')
	local csvstr
	local changed
	if force or not csvpath:exists() then
		print('downloading '..datestr..'...')
		local https = require 'ssl.https'
		local reason
		csvstr, reason = https.request('https://earthquake.usgs.gov/fdsnws/event/1/query.csv?starttime='..datestr..'%2000:00:00&endtime='..datestr..'%2023:59:59&minmagnitude=2.5&orderby=time')
		if not csvstr then
			print('...failed to download: '..tostring(reason))
		else
			if force then
				if csvpath:exists() then
					changed = assert(csvpath:read()) ~= csvstr
				end
			else
				-- if no force and it's a new file, then flag it for 'changed'
				changed = true
			end

			assert(csvpath:write(csvstr))
		end
	else
		-- cached?  don't set the 'changed' flag
		print('reading cache '..csvpath)
		csvstr = assert(csvpath:read())
	end
	local csvdata = assert(require 'csv'.string(csvstr))
	csvdata:setColumnNames(csvdata.rows:remove(1))

	-- map from csv index to k/v object
	return csvdata.rows:mapi(|eq| do
		local neq = {}
		for _,k in ipairs(csvdata.columns) do
			neq[k] = tonumber(eq[k]) or eq[k]
		end
		return neq
	end), changed
end


local earthquakes = table()
local checkTime = time()
do	-- I wish for-loops worked with cdata primitives ...
	local t = checkTime - prevDays * dayInSec
	while t <= checkTime - dayInSec do
		local deq = getDayCache(t)
		earthquakes:append(deq)
		t += dayInSec
	end
end
do	-- always re-download today
	local deq = getDayCache(checkTime, true)
	earthquakes:append(deq)
end
print('total', #earthquakes)
--]=======]

local latLonToXYZ = require 'charts'.latLonToXYZ

if CALC_SUN_OR_MOON_LONGITUDE_ANGLE then
	quakesWithinDegreesOfSun = range(180):mapi(||0)
	quakesWithinDegreesOfMoon = range(180):mapi(||0)
	quakesWithinDegreesOfSunOrMoon = range(180):mapi(||0)
end	-- CALC_SUN_OR_MOON_LONGITUDE_ANGLE

timer('calc xyz', ||do
	for _,eq in ipairs(earthquakes) do
		-- add preprocessed fields
		local Y,m,d,H,M,S = eq.time:match'^(%d%d%d%d)%-(%d%d)%-(%d%d)T(%d%d):(%d%d):(%d%d%.%d%d%d)Z$'
		assert(Y)	-- ... and the others should be there too
		local mustbenumber = |x| do
			return tonumber(x) or error("failed to parse "..tostring(x))
		end
		eq.date = {
			year = mustbenumber(Y),
			month = mustbenumber(m),
			day = mustbenumber(d),
			hour = mustbenumber(H),
			min = mustbenumber(M),
			sec = mustbenumber(S),
		}
		eq.ostime = timegm(eq.date)
assert.eq(ffi.typeof(eq.ostime), ffi.typeof'int64_t')
		eq.julianDay = Julian.fromCalendar(eq.date)
		eq.planets = Planets.fromEphemeris(eq.julianDay, 406, '../solarsystem/eph/406')
		for i,p in ipairs(eq.planets) do
			p.pos = rotateFromSolarToEarthFrame(p.pos, eq.julianDay)
		end
		eq.xyz = latLonToXYZ(eq)
		eq.xyznorm = eq.xyz:normalize()

		-- [[ do some calcs
		if CALC_SUN_OR_MOON_LONGITUDE_ANGLE then
			local vec2d = require 'vec-ffi.vec2d'
			local pt2D = vec2d(eq.xyz.x, eq.xyz.y):normalize()

			local sunDir = eq.planets[Planets.indexes.sun].pos - eq.planets[Planets.indexes.earth].pos
			local sunDir2D = vec2d(sunDir.x, sunDir.y):normalize()
			local sunAngle = math.deg(math.acos(pt2D:dot(sunDir2D)))
			assert.index(quakesWithinDegreesOfSun, math.ceil(sunAngle))
			quakesWithinDegreesOfSun[math.ceil(sunAngle)] += 1

			local moonDir = eq.planets[Planets.indexes.moon].pos - eq.planets[Planets.indexes.earth].pos
			local moonDir2D = vec2d(moonDir.x, moonDir.y):normalize()
			local moonAngle = math.deg(math.acos(pt2D:dot(moonDir2D)))
			assert.index(quakesWithinDegreesOfMoon, math.ceil(moonAngle))
			quakesWithinDegreesOfMoon[math.ceil(moonAngle)] += 1

			assert.index(quakesWithinDegreesOfSunOrMoon, math.ceil(math.min(sunAngle, moonAngle)))
			quakesWithinDegreesOfSunOrMoon[math.ceil(math.min(sunAngle, moonAngle))] += 1
		end -- CALC_SUN_OR_MOON_LONGITUDE_ANGLE
		--]]
	end
	earthquakes:sort(|a,b| a.ostime < b.ostime)	-- oldest first
	--[[
	for i,eq in ipairs(earthquakes) do
		print('earthquake', i, 'time', eq.time, 'ostime', eq.ostime)
	end
	--]]
end)

if CALC_SUN_OR_MOON_LONGITUDE_ANGLE then
	path'quakes within angle of sun or moon.txt':write([[
# plot fn using 0:1 title "sun", fn using 0:2 title "moon", fn using 0:3 title "sun or moon"
# for various angles, count of # of quakes at that longitude angle from quake to sun or moon, from 2025/5/7 to 2025/6/7
# sun angle, moon angle, min(sun angle, moon angle)
]]
		..range(180):mapi(|i|
			table{quakesWithinDegreesOfSun[i], quakesWithinDegreesOfMoon[i], quakesWithinDegreesOfSunOrMoon[i]}:concat'\t'
		):concat'\n'
	)
	os.exit()
end	-- CALC_SUN_OR_MOON_LONGITUDE_ANGLE

return {
	-- for getting earthquakes
	getDayCache = getDayCache,
	checkTime = checkTime,
	-- the initial earthquake set
	earthquakes = assert(earthquakes),
}

end))	-- END TIMER
