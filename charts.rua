-- TODO cache calcs somehow
local vec3d = require 'vec-ffi.vec3d'

-- just require'ing this file costs 4 seconds ... parser and langfix need to be sped up ...
local allCharts = select(2, timer('require geographic-charts', ||
	require 'geographic-charts'
))

local chartNames = table{	-- which charts we want to allow ...
	'Equirectangular',
	'Azimuthal equidistant',
	'Mollweide',
	'WGS84',
	'sphere',
}
local charts = table()
for i,name in ipairs(chartNames) do
	local chart = allCharts![name]
	charts[i] = chart
	charts[name] = chart
end
local chartCNames = charts:mapi(|chart| chart:getCName())


-- can I skip :build once the GLSL code is cached?
local chartCode
local codeCacheFile = path'charts.glsl'
if not codeCacheFile:exists() then  			-- this is 4 seconds
	for _,name in ipairs(chartNames) do
		charts[name]?:build()
	end
	chartCode = require 'geographic-charts.code'(charts)
	assert.type(chartCode, 'string')	-- no functions, right?
	codeCacheFile:write(chartCode)
else
	chartCode = assert(codeCacheFile:read())	-- this is near instant 
end

local WGS84 = charts.WGS84
local latLonToXYZ = |eq| do
	return vec3d(
		WGS84:chart(eq.latitude, eq.longitude, 0)
	) / WGS84.a
end

-- ported from WMM2020 GeomagnetismLibrary.c
-- expects xyz in cartesian units earth-semimajor-axis
-- output is in (radians, radians, km)
--
-- TODO also in earth-magnetic-field/run.lua
-- TODO just use charts.WGS84:chartInv(x,y,z) ?  or use this there?
-- but why is there a dif one in geographic-charts/geographic-charts.lua ' WGS84 chart?
local cartesianToLatLonWGS84 = |x, y, z| do
	x = x * WGS84.a
	y = y * WGS84.a
	z = z * WGS84.a

	local modified_b = z < 0 and -WGS84.b or WGS84.b

	local r = math.sqrt(x*x + y*y)

	local e = ( modified_b*z - (WGS84.a*WGS84.a - modified_b*modified_b) ) / ( WGS84.a*r )
	local f = ( modified_b*z + (WGS84.a*WGS84.a - modified_b*modified_b) ) / ( WGS84.a*r )
	local p = (4 / 3) * (e*f + 1)
	local q = 2 * (e*e - f*f)
	local d = p*p*p + q*q

	local v
	if  d >= 0 then
		v = math.pow( (math.sqrt( d ) - q), (1 / 3) )
			- math.pow( (math.sqrt( d ) + q), (1 / 3) )
	else
		v= 2 * math.sqrt( -p )
			* math.cos( math.acos( q/(p * math.sqrt( -p )) ) / 3 )
	end

	if v*v < math.abs(p)  then
		v = -(v*v*v + 2*q) / (3*p)
	end

	local g = (math.sqrt( e*e + v ) + e) / 2
	local t = math.sqrt( g*g  + (f - v*g)/(2*g - e) ) - g

	local rlat = math.atan( (WGS84.a*(1 - t*t)) / (2*modified_b*t) )
	local phi = rlat

	local height = (r - WGS84.a*t) * math.cos(rlat) + (z - modified_b) * math.sin(rlat)
	local zlong = math.atan2(y, x)
	if  zlong < 0 then
		zlong = zlong + 2*math.pi
	end
	local lambda = zlong
	while lambda > math.pi do
		lambda = lambda - 2 * math.pi
	end
	return phi, lambda, height	-- height is in m
end


return {
	charts = charts,
	chartCode = chartCode,
	chartCNames = chartCNames,
	latLonToXYZ = latLonToXYZ,
	cartesianToLatLonWGS84 = cartesianToLatLonWGS84,
}
