local Julian = require 'solarsystem.julian'
local dayInSec = require 'basis'.dayInSec
local Planets = require 'basis'.Planets
local getPlanets = require 'basis'.getPlanets
local rotateFromSolarToEarthFrame = require 'basis'.rotateFromSolarToEarthFrame
local cartesianToLatLonWGS84 = require 'charts'.cartesianToLatLonWGS84
local WGS84 = require 'charts'.charts.WGS84

local time = timer.time
local timegm = timer.timegm
local gmtime = timer.gmtime

-- TODO this should match with earthquakes.rua
-- put it in its own file or something
local prevDays = 31
local checkTime = time()
local startTime = checkTime - prevDays * dayInSec

local mustbenumber = |x| do
	return tonumber(x) or error("failed to parse "..tostring(x))
end

local timestamp2000 = timegm{year=2000, month=1, day=1, hour=0, min=0, sec=0}
assert.eq(ffi.typeof(timestamp2000), ffi.typeof'int64_t')

local magkeys = table{'A', 'B', 'C', 'M', 'X'}
local indexForFlareClass = magkeys:mapi(function(v,k) return k,v end):setmetatable(nil)
-- A = 10^-8 watts, B = 10^-7, C = 10^-6, M = 10^-5, X = 10^-4
local logIntensityForFlareClass = magkeys:mapi(function(className, classIndex)
	return classIndex-9, className
end):setmetatable(nil)

local flares = table()
timer('calc flares', ||do
	local p = path'../noaa_flares/nc_txt'
	for f in p:dir() do
		if select(2, path(f):getext()) == 'txt' then
			local goes,y,m,d,ver = f.path:match'^dn_xrsf%-l2%-flsum_g(%d%d)_d(%d%d%d%d)(%d%d)(%d%d)_v(%d%-%d%-%d)%.txt$'
			if y then
				y = mustbenumber(y)
				m = mustbenumber(m)
				d = mustbenumber(d)
				local filetime = timegm{year=y, month=m, day=d}
				if filetime >= startTime then
					for l in p(f):lines() do
						local w = l:split'%s+'
						if w[3] == 'EVENT_PEAK' then
							local flare = {}

							-- for verifying times
							flare.filename = f.path
							flare.filenametime = timegm{year=y, month=m, day=d}

							flare.avgflux = mustbenumber(w[1])

							local secSince2000 = mustbenumber(w[4])
							flare.ostime = timestamp2000 + secSince2000
assert.eq(ffi.typeof(flare.ostime), ffi.typeof'int64_t')
							flare.date = gmtime(flare.ostime)
							flare.julianDay = Julian.fromCalendar(flare.date)
							flare.time = ('%04d-%02d-%0d2T%02d:%02d:%02dZ'):format(flare.date.year, flare.date.month, flare.date.day, flare.date.hour, flare.date.min, flare.date.sec)

							flare.bgflux = mustbenumber(w[5])

							flare.magnClass = w[6]:sub(1,1)
							local submagn = mustbenumber(w[6]:sub(2):match'^%d%.%d$')
							flare.magn = logIntensityForFlareClass[flare.magnClass] + submagn

							flare.integratedFlux = mustbenumber(w[7])

							local planets = getPlanets(flare.julianDay)
							for i,p in ipairs(planets) do
								p.pos = rotateFromSolarToEarthFrame(p.pos, flare.julianDay)
							end
							flare.planets = planets
							local earthPos = planets[Planets.indexes.earth].pos
							local sunPos = planets[Planets.indexes.sun].pos - earthPos
							local latrad, lonrad = cartesianToLatLonWGS84((sunPos / WGS84.a):unpack())
							flare.latitude, flare.longitude = math.deg(latrad), math.deg(lonrad)
--DEBUG:print('lat lon mag', flare.latitude, flare.longitude, flare.magn)

							flares:insert(flare)
						end
					end
				end
			else
				-- it might be those old yearly reports ... 2017 and older ... skipping those for now until I get the earthquake data from that time range
			end
		end
	end
	flares:sort(|a,b| a.ostime < b.ostime)
	--[[
	for i,f in ipairs(flares) do
		print('flare', i, 'ostime', f.ostime, 'time', f.time, 'filenametime', f.filenametime, 'filename', f.filename)
	end
	--]]
end)

print('read '..#flares..' flares')

return flares
