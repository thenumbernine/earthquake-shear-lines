local vec3d = require 'vec-ffi.vec3d'
local Planets = require 'solarsystem.planets'

local bisect = require 'bisect'.bisect
local bisectrev = require 'bisect'.bisectrev
local dayInSec = require 'time'.dayInSec

local M = {}


-- when searching for great-arc circles to create.
-- when searching for great-arc circles, ignore point-pairs that are not within this angle distance apart
--M.greatArcAngleMin, M.greatArcAngleMax = 10, 90
--M.greatArcAngleMin, M.greatArcAngleMax = 0, 180
M.greatArcAngleMin, M.greatArcAngleMax = 10, 170

-- when searching for great-arc circles to create.
-- ignore points within this many degrees of previously-considered points
M.filterDuplicatePointsAngleThreshold = 0
--M.filterDuplicatePointsAngleThreshold = 1
--M.filterDuplicatePointsAngleThreshold = 5
--M.filterDuplicatePointsAngleThreshold = 10

-- when searching for touching geodesics.
-- degrees separation minimum from the quake we are checking versus the quakes that formed this geodesic, so we don't have quakes that point at circles that basically formed from the same quake location at a dif time
M.quakeMinAngleDistFromQuakesThatFormedTheGeodesic = 5

-- when searching for touching geodesics.
-- if we get two great-arcs touching our current quake (within `quakeAlignWithPreviousGeodesicAngleThreshold`)
--  then throw out the new one if their axii (+-) is within this angle apart.
-- ... but I think we do want duplicate-arcs to show where multiple-quakes-on-same-arc do align.
-- ... we just don't want duplicate-points, being used to generate those arcs... right?
M.filterDuplicateTouchingArcsAngleThreshold = 0
--M.filterDuplicateTouchingArcsAngleThreshold = 1
--M.filterDuplicateTouchingArcsAngleThreshold = 5
--M.filterDuplicateTouchingArcsAngleThreshold = 10

-- when searching for touching geodesics.
-- tolerance of how close a quake must be to a previous circle to consider along the geodesic
-- VERIFY: birthday problem, odds of two things overlapping in a discrete collection: P(x) = 1 - n! / ((n - x)! n^x)
M.quakeAlignWithPreviousGeodesicAngleThreshold = .1		-- in degrees ... odds of a pair overlapping in 360/0.1=3600 out of a sample size of 70.9 is 50% (odds of finding a geodesic amidst noise: birthday problem for set size of 3600)
--M.quakeAlignWithPreviousGeodesicAngleThreshold = 1	-- in degrees ... " " 360/1=360 " " 22 is 50% ... so you need to consistetly find geodesics in sets o less than 22 quakes
--M.quakeAlignWithPreviousGeodesicAngleThreshold = 2	-- in degrees ... " " 360/2=180 " " 17 is 50%
--M.quakeAlignWithPreviousGeodesicAngleThreshold = 5	-- in degrees ... " " 360/5=72 " " 11 is 50%
--M.quakeAlignWithPreviousGeodesicAngleThreshold = 10	-- in degrees ... " " 360/10=36 " " 8 is 50%
--M.quakeAlignWithPreviousGeodesicAngleThreshold = 15	-- in degrees ... " " 360/15=24 " " 7 is 50%


-- how far back we want to look when comparing great-arcs
--M.prevTimeWindowInDays = 1
M.prevTimeWindowInDays = 3		-- how far into the past
--M.nextTimeWindowInDays = 1
M.nextTimeWindowInDays = 0		-- how far into the future

local basisFor = require 'basis'.basisFor

M.calcCirclesInWindow = |earthquakes, earthquakeWindowStartIndex, earthquakeWindowEndIndex|do
	local allCircles = table()

	for i=earthquakeWindowStartIndex,earthquakeWindowEndIndex do
		local eq2 = earthquakes[i]
		local v = eq2.xyznorm
		-- now do our typical building of great-arcs based on our other angle criteria
		-- TODO do the building of great-arcs FIRST and then scan PLUS OR MINUS in our time window.
		for j=earthquakeWindowStartIndex,i-1 do
			-- TODO filter out repetitive points

			local eq3 = earthquakes[j]
			local v2 = eq3.xyznorm	-- spherical

			local dups
			-- filter out duplicate points for great-arc construction consideration ...
			if (M.filterDuplicatePointsAngleThreshold or 0) > 0 then
				local cosAngle = math.cos(math.rad(M.filterDuplicatePointsAngleThreshold))
				for k=earthquakeWindowStartIndex,j-1 do
					local v3 = earthquakes[k].xyznorm	 -- spherical
					-- secant length to angle ...
					if v3:dot(v2) >= cosAngle then
						dups = true
						break
					end
				end
			end
			if not dups then
				local torque = v:cross(v2)	-- TODO times pair of earthquake magnitudes or something?
				local axisLen = torque:length()
				local axis = torque * (1 / (math.max(axisLen, 1e-15)))
				local influence = axisLen * 10^eq2.mag * 10^eq3.mag
				local angle = math.acos(v:dot(v2))
				if math.rad(M.greatArcAngleMin) < angle and angle < math.rad(M.greatArcAngleMax) then	-- if I weight by cross then that'll make the 0' and 180' angles diminish ... nah, there's still a lot of noise unless I turn down the alpha ... then it's hard to highlight any geodesics ...
					local a1 = axis
					local a2 = basisFor(a1):normalize()
					local a3 = a1:cross(a2)
					local circle = {
						axis = axis,
						axis2 = a2,
						axis3 = a3,
						axisLen = axisLen,	-- length of 'axis' before it gets normalized
						angle = math.pi * .5,
						indexes = {i, j},
						-- [[ used for rendering
						influence = influence,
						color = vec3d(1, .3, .07),
						centerPos = (v + v2):normalize(),	-- midpoint between two earthquake lines
						centerAngle = .5 * angle,			-- half the angle between them
						--]]
					}

					allCircles:insert(circle)
				end
			end
		end
	end

	return allCircles
end

M.findCirclesClosestTo = |earthquakes, earthquakeIndex, allCircles, v|do
	local cosMinAngleDistFromQuakesThatFormedTheGeodesic = math.cos(math.rad(M.quakeMinAngleDistFromQuakesThatFormedTheGeodesic))
	local cosFilterDuplicateTouchingArcsAngleThreshold = math.cos(math.rad(M.filterDuplicateTouchingArcsAngleThreshold))

	-- see how close it is to all other circles on file
	local touchingCircles = table()
	for ci,c in ipairs(allCircles) do
		-- make sure that the points that formed this great-arc are far from this point
		local tooCloseToArcGen = c.indexes[1] == earthquakeIndex or c.indexes[2] == earthquakeIndex
		if not tooCloseToArcGen then
			for k,ei in ipairs(c.indexes) do
				local cosAngle = earthquakes[ei].xyznorm:dot(v)
				if cosAngle > cosMinAngleDistFromQuakesThatFormedTheGeodesic then
					tooCloseToArcGen = true
					break
				end
			end
		end
		if not tooCloseToArcGen then
			-- if we were right on the plane then we would be right at 90' with the axis.
			-- see how far the angle we make with the axis is from 90'
			local cosAngleFromAxis = c.axis:dot(v)	-- cos angle from axis = sine angle from rotation plane
			local angleFromAxis = math.acos(cosAngleFromAxis)
			local angleFromArc = angleFromAxis - .5 * math.pi
			local angleFromArcInDeg = math.abs(math.deg(angleFromArc))
			if angleFromArcInDeg < M.quakeAlignWithPreviousGeodesicAngleThreshold then
				-- if a previous great-arc was already associated with this point and it is close enough to the current great-arc then skip the current one (uniques only)
				local dups
				if (M.filterDuplicateTouchingArcsAngleThreshold or 0) > 0 then
					for ci2=1,ci-1 do
						local c2 = allCircles[ci2]
						if math.abs(c.axis:dot(c2.axis)) > cosFilterDuplicateTouchingArcsAngleThreshold then
							dups = true
							break
						end
					end
				end
				if not dups then
					-- TODO take note (or even filter?) based on the angle distance between us and the prevoius points that it took to form this geodesic?
					-- what if all new quakes happen to be along geodesics but >90' of old geodesic points? (or whatever our geodesic creation angle criteria is)
					touchingCircles:insert{
						circle = c,
						angleFromArcInDeg = angleFromArcInDeg,
					}
				end
			end
		end
	end
	return touchingCircles:sort(|ta,tb| ta.angleFromArcInDeg < tb.angleFromArcInDeg)
end

-- TODO don't calc *all* circles
-- it take 0.1 seconds per quake to calc only its circles
-- so let's just recalc-and-cache per quake
-- TODO TODO now that I'm not calculating *all* circles, it's gonna be duplicate calculating a few circles for each new quake ...
M.calcCircles=|earthquakes, earthquakeIndex, earthquakeWindowStartIndex, earthquakeWindowEndIndex|do

	local eq = earthquakes[earthquakeIndex]

--DEBUG:timer('calc circles', ||do
	-- calculate all geodesics subject to our criteria
	eq.allCircles = M.calcCirclesInWindow(earthquakes, earthquakeWindowStartIndex, earthquakeWindowEndIndex)

	for _,eq2 in ipairs(earthquakes) do
		eq2.circles = {}	-- TODO this set in all earthquakes has to be reset every time the selected earthquake changes
	end
	for ci,circle in ipairs(eq.allCircles) do
		for _,ei in ipairs(circle.indexes) do
			local eq2 = earthquakes[ei]
			eq2.circles[ci] = true
		end
	end
--DEBUG:end)
--print('made '..#eq.allCircles..' great-arcs')

	-- now find all geodesics touching each earthquake
	-- this is slow, 80 seconds... but per quake is 0.1 secons ....
--DEBUG:timer('find quakes along circles', ||do
	eq.touchingCircles = M.findCirclesClosestTo(earthquakes, earthquakeIndex, eq.allCircles, eq.xyznorm)

	--[=[ collect unique points to all circles of this point
	local uniquePointIndexes = {}
	uniquePointIndexes[i] = true
	for _,t in ipairs(touchingCircles) do
		local c = t.circle
		uniquePointIndexes[c.indexes[1]] = true
		uniquePointIndexes[c.indexes[2]] = true
	end
	eq.uniquePointIndexes = uniquePointIndexes	-- do I need a list of all points that are on all circles that are touching this point? or nah?
	--]=]


	eq.minAngleForPlanets = range(#Planets.planetClasses):mapi(||180)
	for _,t in ipairs(eq.touchingCircles) do
		t.angleForPlanets = range(#Planets.planetClasses):mapi(||180)
		local c = t.circle
		for pi,p in ipairs(eq.planets) do
			if p.name ~= 'earth' then
				local planetDir = (p.pos - eq.planets[eq.planets.indexes.earth].pos):normalize()
				local cosAngleFromAxis = c.axis:dot(planetDir)	-- cos angle from axis = sine angle from plane
				local angleFromAxis = math.acos(cosAngleFromAxis)
				local angleFromArc = angleFromAxis - .5 * math.pi
				t.angleForPlanets[pi] = math.abs(math.deg(angleFromArc))	-- will be 0 to 90
				--planetAngleFromGeodesics[pi][math.ceil(angleFromArc)] += 1
				eq.minAngleForPlanets[pi] = math.min(eq.minAngleForPlanets[pi], t.angleForPlanets[pi])
			end
		end
	end
--DEBUG:end)

-- how about instead of calc'ing angle from *all* pairs
-- how about, for an earthquke, just see if the sun is within *any* geodesics
--local CALC_GEODESICS_NEAR_PLANETS = true
if CALC_GEODESICS_NEAR_PLANETS then
	-- TODO if you run this again, best to move it outside the App class and run it over the whole earthquake interval
	assert.eq(earthquakeWindowStartIndex, 1)
	assert.eq(earthquakeWindowEndIndex, #earthquakes)
	local planetMinAngleFromGeodesics = table.mapi(Planets.planetClasses, || range(180):mapi(|| 0 ) )
	for _,eq in ipairs(earthquakes) do
		-- for this quake, tally the min angle between each planet and all active geodesics through this quake
		for pi=1,#Planets.planetClasses do
			planetMinAngleFromGeodesics[pi][math.ceil(eq.minAngleForPlanets[pi])] += 1
		end
	end
	path'min angle of planets from current quake geodesics.txt':write(
		'#'..table.mapi(Planets.planetClasses, |p| p.name):concat'\t'..'\n'
		..range(#planetMinAngleFromGeodesics[1]):mapi(|deg|
			table.mapi(Planets.planetClasses, |p,i|
				planetMinAngleFromGeodesics[i][deg]
			):concat'\t'
		):concat'\n'..'\n'
	)
end	-- CALC_GEODESICS_NEAR_PLANETS
end

return M
